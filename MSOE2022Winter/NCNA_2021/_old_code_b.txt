/** OUTPUT **/
    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < max_pow; ++j) {
            cout << forward[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < max_pow; ++j) {
            cout << backward[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < max_pow; ++j) {
            cout << k_parent[i][j] << " ";
        }
        cout << endl;
    }

    cout << endl;

--------------------------------------------------

//struct node {
//public:
//    int digit;
//    int id;
//    int parentID;
//    int level;
//};
//
//int main() {
//    ios::sync_with_stdio(false);
//    cin.tie(0);
//
//    int n, m, q;
//    cin >> n >> m >> q;
//    node nodes[n + 1];
//    int x, y;
//    cin >> x >> y;
//    int root = x;
//    unordered_set<int> seen;
//    nodes[x].parentID = -1;
//    nodes[x].id = x;
//    nodes[x].level = 1;
//    nodes[y].parentID = x;
//    nodes[y].id = y;
//    nodes[y].level = 2;
//    seen.insert(x); seen.insert(y);
//    for (int i = 1; i < n - 1; ++i) {
//        cin >> x >> y;
//        if (seen.find(x) == seen.end()) { // making sure that x is the seen one
//            swap(x, y);
//        }
//        nodes[y].parentID = x;
//        nodes[y].id = y;
//        nodes[y].level = nodes[x].level + 1;
//        seen.insert(y);
//    }
//    for (int i = 1; i <= n; ++i) {
//        cin >> nodes[i].digit;
//    }
//    for (int query = 0; query < q; ++query) {
//        int a, b;
//        cin >> a >> b;
//        vector<int> a_half;
//        stack<int> b_half;
//        node a_node = nodes[a];
//        node b_node = nodes[b];
//        while (a_node.id != root && a_node.level > b_node.level) {
//            a_half.pb(a_node.id);
//            a_node = nodes[a_node.parentID];
//        }
//        while (b_node.id != root && b_node.level > a_node.level) {
//            b_half.push(b_node.id);
//            b_node = nodes[b_node.parentID];
//        }
//        while (a_node.id != b_node.id) {
//            a_half.pb(a_node.id);
//            a_node = nodes[a_node.parentID];
//            b_half.push(b_node.id);
//            b_node = nodes[b_node.parentID];
//        }
//        a_half.pb(a_node.id);
//        long res = 0;
//        for (int i = 0; i < a_half.size(); ++i) {
//            res = (res * 10l + nodes[a_half[i]].digit) % m;
//        }
//        while (!b_half.empty()) {
//            res = (res * 10l + nodes[b_half.top()].digit) % m;
//            b_half.pop();
//        }
//        cout << res << endl;
//    }
//
//    return 0;
//}